# version: "3.9"

# services:
#     db:
#         image: postgres
#         environment:
#             POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#             POSTGRES_USER: ${POSTGRES_USER}
#             POSTGRES_DB: ${POSTGRES_DB}
#         restart: always
#         healthcheck:
#             test:
#                 [
#                     "CMD-SHELL",
#                     "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}",
#                 ]
#             interval: 5s
#             timeout: 5s
#             retries: 5

#     adminer:
#         image: adminer
#         ports:
#             - 8080:8080
#         container_name: adminer
#         depends_on:
#             db:
#                 condition: service_healthy

#     api:
#         build: ./server
#         ports:
#             - 4000:4000
#         command: sh -c "npm run seed && npm run dev"
#         environment:
#             PORT: 4000
#         restart: always
#         volumes:
#             - ./server:/app/
#         depends_on:
#             db:
#                 condition: service_healthy

#     client:
#         build: ./client
#         ports:
#             - 5173:5173
#         command: npm run dev
#         environment:
#             PORT: 5173
#         restart: always
#         volumes:
#             - ./client:/app/

version: "3.9"

services:
    db:
        image: postgres
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        restart: on-failure # Utilisation de on-failure pour éviter les boucles infinies
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}",
                ]
            interval: 5s
            timeout: 5s
            retries: 5
        volumes:
            - db-data:/var/lib/postgresql/data # Stocker les données de manière persistante

    adminer:
        image: adminer
        ports:
            - 8080:8080
        container_name: adminer
        depends_on:
            db:
                condition: service_healthy

    api:
        build: ./server
        ports:
            - 4000:4000
        command: sh -c "npm run seed && npm run dev"
        environment:
            PORT: 4000
            DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
        restart: on-failure # Pour déboguer plus facilement en cas d'erreur
        volumes:
            - ./server:/app/
            - /app/node_modules # Pour éviter de monter `node_modules` localement, ce qui peut poser problème
        depends_on:
            db:
                condition: service_healthy

    client:
        build: ./client
        ports:
            - 5173:5173
        command: npm run dev --host
        environment:
            PORT: 5173
            VITE_API_URL: "http://localhost:4000" # Pour configurer l'URL de l'API côté client
        restart: on-failure
        volumes:
            - ./client:/app/
            - /app/node_modules # Pareil que pour api, éviter d'utiliser les `node_modules` locaux

volumes:
    db-data:
